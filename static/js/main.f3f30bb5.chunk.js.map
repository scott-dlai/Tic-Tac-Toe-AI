{"version":3,"sources":["calculateWinner.js","isFull.js","computer.js","human.js","nextMove.js","evaluate.js","index.js"],"names":["calculateWinner","squares","winner","column","row","isFull","computer","human","nextMove","board","bestMoveRow","bestMoveColumn","score","bestMoveEval","Infinity","minimax","n","Math","random","depth","isMinimizing","alpha","beta","evaluation","evaluate","bestEval","min","max","a","b","Square","props","squareClass","value","className","onClick","Board","this","boardRow","push","renderSquare","createBoard","React","Component","Game","state","humanFirst","gameStart","slice","clearBoard","setState","playBtn","status","handleClick","Footer","href","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f3f30bb5.chunk.js","sourcesContent":["/**\n * Returns the winner of the match based on the specified 3x3 tic tac toe board.\n * If there's no winner, i.e. the match hasn't finished or draw, returns \"TIE\".\n * @param {2d array} squares 3x3 tic tac toe board\n */\nexport function calculateWinner(squares) {\n  let winner = \"TIE\";\n  // Check for vertical\n  for (let column = 0; column < 3; column++) {\n    if (squares[0][column] === squares[1][column] \n      && squares[1][column] === squares[2][column] && squares[0][column]) {\n      winner = squares[0][column]\n    }\n  }\n\n  // Check for horizontal\n  for (let row = 0; row < 3; row++) {\n    if (squares[row][0] === squares[row][1]\n      && squares[row][1] === squares[row][2] && squares[row][0]) {\n        winner = squares[row][0];\n      }\n  }\n\n  // Check \\ diagonal\n  if (squares[0][0] && squares[0][0] === squares[1][1] \n    && squares[1][1] === squares[2][2]) {\n      winner = squares[0][0];\n  }\n\n  // Check / diagonal\n  if (squares[0][2] && squares[0][2] === squares[1][1] \n    && squares[1][1] === squares[2][0]) {\n      winner = squares[0][2];\n    }\n\n  return winner;\n}","/**\n * Returns if the specified 3x3 tic tac toe board is full or not.\n * @param {2d Array} squares 3x3 tic tac toe board\n */\nexport function isFull(squares) {\n  return squares[0][0] && squares[0][1] && squares[0][2]\n      && squares[1][0] && squares[1][1] && squares[1][2]\n      && squares[2][0] && squares[2][1] && squares[2][2];\n}","export const computer = \"O\";","export const human = \"X\";","import { calculateWinner } from \"./calculateWinner\";\nimport { isFull } from \"./isFull\";\nimport {evaluate} from \"./evaluate.js\";\nimport { human } from \"./human.js\";\nimport { computer } from \"./computer.js\";\n\n/**\n * Make the best moves by checking every move and calling the minimax function.\n * @param {2d array} board current position of a 3x3 tic-tac-toe board\n */\nexport function nextMove(board) {\n  if (isFull(board)) {\n    return;\n  }\n\n  let bestMoveEval = -Infinity;\n  let bestMoveRow;\n  let bestMoveColumn;\n  let score;\n  \n  for (let row = 0; row < 3; row++) {\n\n    for (let column = 0; column < 3; column++) {\n\n      if (!board[row][column]) {\n        board[row][column] = computer;\n\n        score = minimax(board, 0, true, -Infinity, Infinity);\n        board[row][column] = \"\"\n\n        if (score > bestMoveEval) {\n          bestMoveEval = score;\n          bestMoveRow = row;\n          bestMoveColumn = column;\n        } else if (score === bestMoveEval) {\n          let n = Math.random();\n          bestMoveRow = n < 0.35 ? row : bestMoveRow;\n          bestMoveColumn = n < 0.35 ? column : bestMoveColumn;\n        }\n      }\n    }\n\n}\n\n  board[bestMoveRow][bestMoveColumn] = computer;\n}\n\n/**\n * Returns the evaluation of a position.\n * @param {2d array} board current postiion of the 3x3 tic-tac-toe board\n * @param {number} depth depth of the tree\n * @param {boolean} isMinimizing if it is the minimizing player's (human) turn\n * @param {number} alpha the best score the maximizing player (computer) is\n *  guaranteed to have\n * @param {number} beta the best score the minimizing player (human) is\n *  guaranteed to have\n */\nfunction minimax(board, depth, isMinimizing, alpha, beta) {\n  if (calculateWinner(board) !== \"TIE\" || isFull(board)) {\n    let evaluation = evaluate(board);\n    evaluation += evaluation > 0 ? -depth : depth;\n\n    return evaluation;\n  }\n\n  let bestEval;\n  bestEval = isMinimizing ? Infinity : -Infinity;\n\n  for (let row = 0; row < 3; row++) {\n\n    for (let column = 0; column < 3; column++) {\n\n      if (!board[row][column]) {\n        board[row][column] = isMinimizing ? human : computer;\n        let score = minimax(board, depth + 1, !isMinimizing, alpha, beta);\n        board[row][column] = \"\";\n\n        bestEval = isMinimizing ? min(bestEval, score) : max(bestEval, score);\n\n        if (isMinimizing) {\n          beta = min(bestEval, beta);\n        } else {\n          alpha = max(bestEval, alpha);\n        }\n\n        if (alpha >= beta) {\n          break;\n        }\n      }\n    }\n  }\n\n  return bestEval;\n}\n\n/**\n * Returns the minimum value between a and b. If a = b, then returns b.\n * @param {number} a \n * @param {number} b \n */\nfunction min(a, b) {\n  return a < b ? a : b;\n}\n\n/**\n * Returns the maximum value between a and b. If a = b, then returns b.\n * @param {number} a \n * @param {number} b \n */\nfunction max(a, b) {\n  return a > b ? a : b;\n} ","import { calculateWinner } from \"./calculateWinner\";\nimport { computer } from \"./computer\";\nimport { human } from \"./human\";\n\nexport function evaluate(board) {\n  let winner = calculateWinner(board);\n  \n  if (winner === computer) {\n    return 10;\n  } else if (winner === human) {\n    return -10;\n  } else {\n    return 0;\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { calculateWinner } from './calculateWinner.js';\nimport { isFull } from './isFull.js';\nimport { nextMove } from \"./nextMove.js\";\nimport { human } from \"./human.js\";\nimport { computer } from \"./computer.js\";\n\n\nfunction Square(props) {\n  const squareClass = \"square \" + (props.value ? \"\" : \"hoverable \")\n    + (props.value === human ? human : computer);\n\n  return (\n    <button className={squareClass} onClick={props.onClick}>\n      <span>{props.value}</span>\n    </button>\n  );\n}\n\nclass Board extends React.Component {\n  renderSquare(row, column) {\n    return <Square\n      value={this.props.squares[row][column]}\n      onClick={() => this.props.onClick(row, column)}\n    />;\n  }\n\n  createBoard() {\n    let board = [];\n\n    for (let row = 0; row < 3; row++) {\n      let boardRow = [];\n\n      for (let column = 0; column < 3; column++) {\n        boardRow.push(this.renderSquare(row, column));\n      }\n\n      board.push(<div className=\"board-row\">{boardRow}</div>);\n    }\n\n    return board;\n  }\n\n  render() {\n    return (\n      <>{this.createBoard()}</>\n    );\n  }\n}\n\nclass Game extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      squares: [\n        [\"\", \"\", \"\"],\n        [\"\", \"\", \"\"],\n        [\"\", \"\", \"\"]\n      ],\n      humanFirst: true,\n      gameStart: true,\n    }\n  }\n\n  handleClick(row, column) {\n    const squares = this.state.squares.slice();\n\n    if (squares[row][column]) {\n      return;\n    }\n\n    if (calculateWinner(squares) !== \"TIE\" || isFull(squares)) {\n      return (\n        <button onClick={() => this.clearBoard()}>\n          REPLAY\n        </button>\n      );\n    }\n\n    squares[row][column] = human;\n\n    this.setState({\n      squares: squares,\n      gameStart: false,\n    });\n\n    nextMove(squares);\n  }\n\n  clearBoard() {\n    this.setState({\n      squares: [\n        [\"\", \"\", \"\"],\n        [\"\", \"\", \"\"],\n        [\"\", \"\", \"\"]\n      ],\n      humanFirst: !this.state.humanFirst,\n      gameStart: true,\n    });\n  }\n\n  render() {\n    const squares = this.state.squares;\n    let playBtn;\n\n    let status = \"Tic-Tac-Toe\";\n\n    const winner = calculateWinner(squares);\n\n    if (this.state.gameStart && !this.state.humanFirst) {\n      nextMove(squares);\n      this.setState({\n        squares: squares,\n        gameStart: false,\n      });\n    }\n\n    if (winner !== \"TIE\" || isFull(squares)) {\n      status = \"Winner: \" + winner;\n      playBtn = <button onClick={() => this.clearBoard()}\n                  className=\"replay\">\n                    REPLAY\n                  </button>\n    }\n\n    return (\n      <div className=\"game\">\n        <div className=\"status\">{status}</div>\n        <div className=\"game-board\">\n          <Board\n            squares={squares}\n            onClick={(row, column) => this.handleClick(row, column)}\n          />\n        </div>\n        <>{playBtn}</>\n      </div>\n    );\n  }\n}\n\nclass Footer extends React.Component {\n\n  render() {\n\n    return (\n      <div className=\"footer\">\n        <p>\n          <a href=\"https://github.com/tuonglai3602/Tic-Tac-Toe-AI\">\n            Made by Scott Lai\n          </a>\n        </p>\n      </div>\n    );\n  }\n}\n\n// ========================================\n\nReactDOM.render(\n  <>\n    <Game />\n    <Footer />\n  </>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}